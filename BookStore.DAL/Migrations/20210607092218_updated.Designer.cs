// <auto-generated />
using System;
using BookStore.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.DAL.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    [Migration("20210607092218_updated")]
    partial class updated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.DAL.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1821, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Moszkva",
                            Name = "Fjodor Mihajlovics Dosztojevszkij"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1903, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Motihari",
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1797, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Sommers Town",
                            Name = "Mary Shelley"
                        });
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Subjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ISBN");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            ISBN = "ISBN 963-07-0048-4",
                            PublishedYear = 1866,
                            Subjects = "Romance",
                            Title = "Bűn és bűnhődés"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            ISBN = "ISBN 963 07 1282 2",
                            PublishedYear = 1880,
                            Subjects = "Scifi, Action",
                            Title = "A Karamazov testvérek"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            ISBN = "ISBN 9630720876",
                            PublishedYear = 1869,
                            Subjects = "Drama, Mystery",
                            Title = "A félkegyelmű"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            ISBN = "ISBN 963-07-4815-0",
                            PublishedYear = 1949,
                            Subjects = "Crime",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            ISBN = "ISBN 9630749467",
                            PublishedYear = 1945,
                            Subjects = "Children, Romance",
                            Title = "Állatfarm"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            ISBN = "ISBN 9630773201",
                            PublishedYear = 1939,
                            Subjects = "Thriller, Scifi, Classic",
                            Title = "Légszomj"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            ISBN = "ISBN 9780008325923",
                            PublishedYear = 1818,
                            Subjects = "Fantasy, Horror, Drama",
                            Title = "Frankenstein"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 3,
                            ISBN = " ISBN 9789633440414",
                            PublishedYear = 1859,
                            Subjects = "Action, Crime",
                            Title = "Mathilda"
                        });
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Borrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BorrowedBookId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BorrowedBookId");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Borrows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BorrowedBookId = 1,
                            BorrowerId = 1,
                            DeadLine = new DateTime(2021, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BorrowedBookId = 2,
                            BorrowerId = 1,
                            DeadLine = new DateTime(2021, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BorrowedBookId = 3,
                            BorrowerId = 2,
                            DeadLine = new DateTime(2021, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2021, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BorrowedBookId = 5,
                            BorrowerId = 2,
                            DeadLine = new DateTime(2021, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2021, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BorrowedBookId = 7,
                            BorrowerId = 1,
                            DeadLine = new DateTime(2021, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDay = new DateTime(1983, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teszt Elek",
                            ZipCode = 1011
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bádog Béla",
                            PhoneNumber = "36203459876"
                        });
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Book", b =>
                {
                    b.HasOne("BookStore.DAL.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Borrowing", b =>
                {
                    b.HasOne("BookStore.DAL.Entities.Book", "BorrowedBook")
                        .WithMany("Borrows")
                        .HasForeignKey("BorrowedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.DAL.Entities.Member", "Borrower")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowedBook");

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Book", b =>
                {
                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("BookStore.DAL.Entities.Member", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
